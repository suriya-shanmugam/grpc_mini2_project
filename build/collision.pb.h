// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: collision.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_collision_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_collision_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_collision_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_collision_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_collision_2eproto;
class GRPCollision;
struct GRPCollisionDefaultTypeInternal;
extern GRPCollisionDefaultTypeInternal _GRPCollision_default_instance_;
class QueryCondition;
struct QueryConditionDefaultTypeInternal;
extern QueryConditionDefaultTypeInternal _QueryCondition_default_instance_;
class QueryRequest;
struct QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
struct QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Condition : int {
  EQUALS = 0,
  NOT_EQUALS = 1,
  Condition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Condition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Condition_IsValid(int value);
extern const uint32_t Condition_internal_data_[];
constexpr Condition Condition_MIN = static_cast<Condition>(0);
constexpr Condition Condition_MAX = static_cast<Condition>(1);
constexpr int Condition_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Condition_descriptor();
template <typename T>
const std::string& Condition_Name(T value) {
  static_assert(std::is_same<T, Condition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Condition_Name().");
  return Condition_Name(static_cast<Condition>(value));
}
template <>
inline const std::string& Condition_Name(Condition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Condition_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Condition_Parse(absl::string_view name, Condition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Condition>(
      Condition_descriptor(), name, value);
}
enum QueryFields : int {
  CRASH_DATE = 0,
  CRASH_TIME = 1,
  BOROUGH = 2,
  ZIP_CODE = 3,
  LATITUDE = 4,
  LONGITUDE = 5,
  LOCATION = 6,
  ON_STREET_NAME = 7,
  CROSS_STREET_NAME = 8,
  OFF_STREET_NAME = 9,
  NUMBER_OF_PERSONS_INJURED = 10,
  NUMBER_OF_PERSONS_KILLED = 11,
  NUMBER_OF_PEDESTRIANS_INJURED = 12,
  NUMBER_OF_PEDESTRIANS_KILLED = 13,
  NUMBER_OF_CYCLIST_INJURED = 14,
  NUMBER_OF_CYCLIST_KILLED = 15,
  NUMBER_OF_MOTORIST_INJURED = 16,
  NUMBER_OF_MOTORIST_KILLED = 17,
  CONTRIBUTING_FACTOR_VEHICLE_1 = 18,
  CONTRIBUTING_FACTOR_VEHICLE_2 = 19,
  CONTRIBUTING_FACTOR_VEHICLE_3 = 20,
  CONTRIBUTING_FACTOR_VEHICLE_4 = 21,
  CONTRIBUTING_FACTOR_VEHICLE_5 = 22,
  COLLISION_ID = 23,
  VEHICLE_TYPE_CODE_1 = 24,
  VEHICLE_TYPE_CODE_2 = 25,
  VEHICLE_TYPE_CODE_3 = 26,
  VEHICLE_TYPE_CODE_4 = 27,
  VEHICLE_TYPE_CODE_5 = 28,
  QueryFields_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  QueryFields_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool QueryFields_IsValid(int value);
extern const uint32_t QueryFields_internal_data_[];
constexpr QueryFields QueryFields_MIN = static_cast<QueryFields>(0);
constexpr QueryFields QueryFields_MAX = static_cast<QueryFields>(28);
constexpr int QueryFields_ARRAYSIZE = 28 + 1;
const ::google::protobuf::EnumDescriptor*
QueryFields_descriptor();
template <typename T>
const std::string& QueryFields_Name(T value) {
  static_assert(std::is_same<T, QueryFields>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to QueryFields_Name().");
  return QueryFields_Name(static_cast<QueryFields>(value));
}
template <>
inline const std::string& QueryFields_Name(QueryFields value) {
  return ::google::protobuf::internal::NameOfDenseEnum<QueryFields_descriptor,
                                                 0, 28>(
      static_cast<int>(value));
}
inline bool QueryFields_Parse(absl::string_view name, QueryFields* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryFields>(
      QueryFields_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class QueryCondition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:QueryCondition) */ {
 public:
  inline QueryCondition() : QueryCondition(nullptr) {}
  ~QueryCondition() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCondition(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryCondition(const QueryCondition& from) : QueryCondition(nullptr, from) {}
  inline QueryCondition(QueryCondition&& from) noexcept
      : QueryCondition(nullptr, std::move(from)) {}
  inline QueryCondition& operator=(const QueryCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCondition& operator=(QueryCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCondition& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kStrData = 3,
    kIntData = 4,
    DATA_NOT_SET = 0,
  };
  static inline const QueryCondition* internal_default_instance() {
    return reinterpret_cast<const QueryCondition*>(
        &_QueryCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(QueryCondition& a, QueryCondition& b) { a.Swap(&b); }
  inline void Swap(QueryCondition* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCondition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCondition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QueryCondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryCondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryCondition& from) { QueryCondition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QueryCondition* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "QueryCondition"; }

 protected:
  explicit QueryCondition(::google::protobuf::Arena* arena);
  QueryCondition(::google::protobuf::Arena* arena, const QueryCondition& from);
  QueryCondition(::google::protobuf::Arena* arena, QueryCondition&& from) noexcept
      : QueryCondition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldFieldNumber = 1,
    kConditionFieldNumber = 2,
    kStrDataFieldNumber = 3,
    kIntDataFieldNumber = 4,
  };
  // .QueryFields field = 1;
  void clear_field() ;
  ::QueryFields field() const;
  void set_field(::QueryFields value);

  private:
  ::QueryFields _internal_field() const;
  void _internal_set_field(::QueryFields value);

  public:
  // .Condition condition = 2;
  void clear_condition() ;
  ::Condition condition() const;
  void set_condition(::Condition value);

  private:
  ::Condition _internal_condition() const;
  void _internal_set_condition(::Condition value);

  public:
  // string str_data = 3;
  bool has_str_data() const;
  void clear_str_data() ;
  const std::string& str_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str_data(Arg_&& arg, Args_... args);
  std::string* mutable_str_data();
  PROTOBUF_NODISCARD std::string* release_str_data();
  void set_allocated_str_data(std::string* value);

  private:
  const std::string& _internal_str_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str_data(
      const std::string& value);
  std::string* _internal_mutable_str_data();

  public:
  // int32 int_data = 4;
  bool has_int_data() const;
  void clear_int_data() ;
  ::int32_t int_data() const;
  void set_int_data(::int32_t value);

  private:
  ::int32_t _internal_int_data() const;
  void _internal_set_int_data(::int32_t value);

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:QueryCondition)
 private:
  class _Internal;
  void set_has_str_data();
  void set_has_int_data();
  inline bool has_data() const;
  inline void clear_has_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 0,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_QueryCondition_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryCondition& from_msg);
    int field_;
    int condition_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr str_data_;
      ::int32_t int_data_;
    } data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collision_2eproto;
};
// -------------------------------------------------------------------

class GRPCollision final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GRPCollision) */ {
 public:
  inline GRPCollision() : GRPCollision(nullptr) {}
  ~GRPCollision() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GRPCollision(
      ::google::protobuf::internal::ConstantInitialized);

  inline GRPCollision(const GRPCollision& from) : GRPCollision(nullptr, from) {}
  inline GRPCollision(GRPCollision&& from) noexcept
      : GRPCollision(nullptr, std::move(from)) {}
  inline GRPCollision& operator=(const GRPCollision& from) {
    CopyFrom(from);
    return *this;
  }
  inline GRPCollision& operator=(GRPCollision&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GRPCollision& default_instance() {
    return *internal_default_instance();
  }
  static inline const GRPCollision* internal_default_instance() {
    return reinterpret_cast<const GRPCollision*>(
        &_GRPCollision_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GRPCollision& a, GRPCollision& b) { a.Swap(&b); }
  inline void Swap(GRPCollision* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GRPCollision* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GRPCollision* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GRPCollision>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GRPCollision& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GRPCollision& from) { GRPCollision::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GRPCollision* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GRPCollision"; }

 protected:
  explicit GRPCollision(::google::protobuf::Arena* arena);
  GRPCollision(::google::protobuf::Arena* arena, const GRPCollision& from);
  GRPCollision(::google::protobuf::Arena* arena, GRPCollision&& from) noexcept
      : GRPCollision(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCrashDateFieldNumber = 1,
    kCrashTimeFieldNumber = 2,
    kBoroughFieldNumber = 3,
    kLocationFieldNumber = 7,
    kOnStreetNameFieldNumber = 8,
    kCrossStreetNameFieldNumber = 9,
    kOffStreetNameFieldNumber = 10,
    kContributingFactorVehicle1FieldNumber = 19,
    kContributingFactorVehicle2FieldNumber = 20,
    kContributingFactorVehicle3FieldNumber = 21,
    kContributingFactorVehicle4FieldNumber = 22,
    kContributingFactorVehicle5FieldNumber = 23,
    kVehicleTypeCode1FieldNumber = 25,
    kVehicleTypeCode2FieldNumber = 26,
    kVehicleTypeCode3FieldNumber = 27,
    kVehicleTypeCode4FieldNumber = 28,
    kVehicleTypeCode5FieldNumber = 29,
    kZipCodeFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kNumberOfPersonsInjuredFieldNumber = 11,
    kNumberOfPersonsKilledFieldNumber = 12,
    kNumberOfPedestriansInjuredFieldNumber = 13,
    kNumberOfPedestriansKilledFieldNumber = 14,
    kNumberOfCyclistInjuredFieldNumber = 15,
    kNumberOfCyclistKilledFieldNumber = 16,
    kNumberOfMotoristInjuredFieldNumber = 17,
    kCollisionIdFieldNumber = 24,
    kNumberOfMotoristKilledFieldNumber = 18,
  };
  // string crash_date = 1;
  void clear_crash_date() ;
  const std::string& crash_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crash_date(Arg_&& arg, Args_... args);
  std::string* mutable_crash_date();
  PROTOBUF_NODISCARD std::string* release_crash_date();
  void set_allocated_crash_date(std::string* value);

  private:
  const std::string& _internal_crash_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crash_date(
      const std::string& value);
  std::string* _internal_mutable_crash_date();

  public:
  // string crash_time = 2;
  void clear_crash_time() ;
  const std::string& crash_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crash_time(Arg_&& arg, Args_... args);
  std::string* mutable_crash_time();
  PROTOBUF_NODISCARD std::string* release_crash_time();
  void set_allocated_crash_time(std::string* value);

  private:
  const std::string& _internal_crash_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crash_time(
      const std::string& value);
  std::string* _internal_mutable_crash_time();

  public:
  // string borough = 3;
  void clear_borough() ;
  const std::string& borough() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_borough(Arg_&& arg, Args_... args);
  std::string* mutable_borough();
  PROTOBUF_NODISCARD std::string* release_borough();
  void set_allocated_borough(std::string* value);

  private:
  const std::string& _internal_borough() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_borough(
      const std::string& value);
  std::string* _internal_mutable_borough();

  public:
  // string location = 7;
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // string on_street_name = 8;
  void clear_on_street_name() ;
  const std::string& on_street_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_on_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_on_street_name();
  PROTOBUF_NODISCARD std::string* release_on_street_name();
  void set_allocated_on_street_name(std::string* value);

  private:
  const std::string& _internal_on_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_on_street_name(
      const std::string& value);
  std::string* _internal_mutable_on_street_name();

  public:
  // string cross_street_name = 9;
  void clear_cross_street_name() ;
  const std::string& cross_street_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cross_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_cross_street_name();
  PROTOBUF_NODISCARD std::string* release_cross_street_name();
  void set_allocated_cross_street_name(std::string* value);

  private:
  const std::string& _internal_cross_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cross_street_name(
      const std::string& value);
  std::string* _internal_mutable_cross_street_name();

  public:
  // string off_street_name = 10;
  void clear_off_street_name() ;
  const std::string& off_street_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_off_street_name(Arg_&& arg, Args_... args);
  std::string* mutable_off_street_name();
  PROTOBUF_NODISCARD std::string* release_off_street_name();
  void set_allocated_off_street_name(std::string* value);

  private:
  const std::string& _internal_off_street_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_off_street_name(
      const std::string& value);
  std::string* _internal_mutable_off_street_name();

  public:
  // string contributing_factor_vehicle_1 = 19;
  void clear_contributing_factor_vehicle_1() ;
  const std::string& contributing_factor_vehicle_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_1(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_1();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_1();
  void set_allocated_contributing_factor_vehicle_1(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_1(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_1();

  public:
  // string contributing_factor_vehicle_2 = 20;
  void clear_contributing_factor_vehicle_2() ;
  const std::string& contributing_factor_vehicle_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_2(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_2();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_2();
  void set_allocated_contributing_factor_vehicle_2(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_2(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_2();

  public:
  // string contributing_factor_vehicle_3 = 21;
  void clear_contributing_factor_vehicle_3() ;
  const std::string& contributing_factor_vehicle_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_3(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_3();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_3();
  void set_allocated_contributing_factor_vehicle_3(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_3(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_3();

  public:
  // string contributing_factor_vehicle_4 = 22;
  void clear_contributing_factor_vehicle_4() ;
  const std::string& contributing_factor_vehicle_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_4(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_4();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_4();
  void set_allocated_contributing_factor_vehicle_4(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_4(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_4();

  public:
  // string contributing_factor_vehicle_5 = 23;
  void clear_contributing_factor_vehicle_5() ;
  const std::string& contributing_factor_vehicle_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contributing_factor_vehicle_5(Arg_&& arg, Args_... args);
  std::string* mutable_contributing_factor_vehicle_5();
  PROTOBUF_NODISCARD std::string* release_contributing_factor_vehicle_5();
  void set_allocated_contributing_factor_vehicle_5(std::string* value);

  private:
  const std::string& _internal_contributing_factor_vehicle_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contributing_factor_vehicle_5(
      const std::string& value);
  std::string* _internal_mutable_contributing_factor_vehicle_5();

  public:
  // string vehicle_type_code_1 = 25;
  void clear_vehicle_type_code_1() ;
  const std::string& vehicle_type_code_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_1(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_1();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_1();
  void set_allocated_vehicle_type_code_1(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_1(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_1();

  public:
  // string vehicle_type_code_2 = 26;
  void clear_vehicle_type_code_2() ;
  const std::string& vehicle_type_code_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_2(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_2();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_2();
  void set_allocated_vehicle_type_code_2(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_2(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_2();

  public:
  // string vehicle_type_code_3 = 27;
  void clear_vehicle_type_code_3() ;
  const std::string& vehicle_type_code_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_3(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_3();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_3();
  void set_allocated_vehicle_type_code_3(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_3(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_3();

  public:
  // string vehicle_type_code_4 = 28;
  void clear_vehicle_type_code_4() ;
  const std::string& vehicle_type_code_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_4(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_4();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_4();
  void set_allocated_vehicle_type_code_4(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_4(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_4();

  public:
  // string vehicle_type_code_5 = 29;
  void clear_vehicle_type_code_5() ;
  const std::string& vehicle_type_code_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehicle_type_code_5(Arg_&& arg, Args_... args);
  std::string* mutable_vehicle_type_code_5();
  PROTOBUF_NODISCARD std::string* release_vehicle_type_code_5();
  void set_allocated_vehicle_type_code_5(std::string* value);

  private:
  const std::string& _internal_vehicle_type_code_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_type_code_5(
      const std::string& value);
  std::string* _internal_mutable_vehicle_type_code_5();

  public:
  // uint32 zip_code = 4;
  void clear_zip_code() ;
  ::uint32_t zip_code() const;
  void set_zip_code(::uint32_t value);

  private:
  ::uint32_t _internal_zip_code() const;
  void _internal_set_zip_code(::uint32_t value);

  public:
  // float latitude = 5;
  void clear_latitude() ;
  float latitude() const;
  void set_latitude(float value);

  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);

  public:
  // float longitude = 6;
  void clear_longitude() ;
  float longitude() const;
  void set_longitude(float value);

  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);

  public:
  // uint32 number_of_persons_injured = 11;
  void clear_number_of_persons_injured() ;
  ::uint32_t number_of_persons_injured() const;
  void set_number_of_persons_injured(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_persons_injured() const;
  void _internal_set_number_of_persons_injured(::uint32_t value);

  public:
  // uint32 number_of_persons_killed = 12;
  void clear_number_of_persons_killed() ;
  ::uint32_t number_of_persons_killed() const;
  void set_number_of_persons_killed(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_persons_killed() const;
  void _internal_set_number_of_persons_killed(::uint32_t value);

  public:
  // uint32 number_of_pedestrians_injured = 13;
  void clear_number_of_pedestrians_injured() ;
  ::uint32_t number_of_pedestrians_injured() const;
  void set_number_of_pedestrians_injured(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_pedestrians_injured() const;
  void _internal_set_number_of_pedestrians_injured(::uint32_t value);

  public:
  // uint32 number_of_pedestrians_killed = 14;
  void clear_number_of_pedestrians_killed() ;
  ::uint32_t number_of_pedestrians_killed() const;
  void set_number_of_pedestrians_killed(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_pedestrians_killed() const;
  void _internal_set_number_of_pedestrians_killed(::uint32_t value);

  public:
  // uint32 number_of_cyclist_injured = 15;
  void clear_number_of_cyclist_injured() ;
  ::uint32_t number_of_cyclist_injured() const;
  void set_number_of_cyclist_injured(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_cyclist_injured() const;
  void _internal_set_number_of_cyclist_injured(::uint32_t value);

  public:
  // uint32 number_of_cyclist_killed = 16;
  void clear_number_of_cyclist_killed() ;
  ::uint32_t number_of_cyclist_killed() const;
  void set_number_of_cyclist_killed(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_cyclist_killed() const;
  void _internal_set_number_of_cyclist_killed(::uint32_t value);

  public:
  // uint32 number_of_motorist_injured = 17;
  void clear_number_of_motorist_injured() ;
  ::uint32_t number_of_motorist_injured() const;
  void set_number_of_motorist_injured(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_motorist_injured() const;
  void _internal_set_number_of_motorist_injured(::uint32_t value);

  public:
  // uint64 collision_id = 24;
  void clear_collision_id() ;
  ::uint64_t collision_id() const;
  void set_collision_id(::uint64_t value);

  private:
  ::uint64_t _internal_collision_id() const;
  void _internal_set_collision_id(::uint64_t value);

  public:
  // uint32 number_of_motorist_killed = 18;
  void clear_number_of_motorist_killed() ;
  ::uint32_t number_of_motorist_killed() const;
  void set_number_of_motorist_killed(::uint32_t value);

  private:
  ::uint32_t _internal_number_of_motorist_killed() const;
  void _internal_set_number_of_motorist_killed(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GRPCollision)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 29, 0,
      366, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GRPCollision_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GRPCollision& from_msg);
    ::google::protobuf::internal::ArenaStringPtr crash_date_;
    ::google::protobuf::internal::ArenaStringPtr crash_time_;
    ::google::protobuf::internal::ArenaStringPtr borough_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::internal::ArenaStringPtr on_street_name_;
    ::google::protobuf::internal::ArenaStringPtr cross_street_name_;
    ::google::protobuf::internal::ArenaStringPtr off_street_name_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_1_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_2_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_3_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_4_;
    ::google::protobuf::internal::ArenaStringPtr contributing_factor_vehicle_5_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_1_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_2_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_3_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_4_;
    ::google::protobuf::internal::ArenaStringPtr vehicle_type_code_5_;
    ::uint32_t zip_code_;
    float latitude_;
    float longitude_;
    ::uint32_t number_of_persons_injured_;
    ::uint32_t number_of_persons_killed_;
    ::uint32_t number_of_pedestrians_injured_;
    ::uint32_t number_of_pedestrians_killed_;
    ::uint32_t number_of_cyclist_injured_;
    ::uint32_t number_of_cyclist_killed_;
    ::uint32_t number_of_motorist_injured_;
    ::uint64_t collision_id_;
    ::uint32_t number_of_motorist_killed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collision_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:QueryResponse) */ {
 public:
  inline QueryResponse() : QueryResponse(nullptr) {}
  ~QueryResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryResponse(const QueryResponse& from) : QueryResponse(nullptr, from) {}
  inline QueryResponse(QueryResponse&& from) noexcept
      : QueryResponse(nullptr, std::move(from)) {}
  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
        &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(QueryResponse& a, QueryResponse& b) { a.Swap(&b); }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QueryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryResponse& from) { QueryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QueryResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "QueryResponse"; }

 protected:
  explicit QueryResponse(::google::protobuf::Arena* arena);
  QueryResponse(::google::protobuf::Arena* arena, const QueryResponse& from);
  QueryResponse(::google::protobuf::Arena* arena, QueryResponse&& from) noexcept
      : QueryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCollisionFieldNumber = 1,
  };
  // repeated .GRPCollision collision = 1;
  int collision_size() const;
  private:
  int _internal_collision_size() const;

  public:
  void clear_collision() ;
  ::GRPCollision* mutable_collision(int index);
  ::google::protobuf::RepeatedPtrField<::GRPCollision>* mutable_collision();

  private:
  const ::google::protobuf::RepeatedPtrField<::GRPCollision>& _internal_collision() const;
  ::google::protobuf::RepeatedPtrField<::GRPCollision>* _internal_mutable_collision();
  public:
  const ::GRPCollision& collision(int index) const;
  ::GRPCollision* add_collision();
  const ::google::protobuf::RepeatedPtrField<::GRPCollision>& collision() const;
  // @@protoc_insertion_point(class_scope:QueryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_QueryResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::GRPCollision > collision_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collision_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:QueryRequest) */ {
 public:
  inline QueryRequest() : QueryRequest(nullptr) {}
  ~QueryRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryRequest(const QueryRequest& from) : QueryRequest(nullptr, from) {}
  inline QueryRequest(QueryRequest&& from) noexcept
      : QueryRequest(nullptr, std::move(from)) {}
  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
        &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(QueryRequest& a, QueryRequest& b) { a.Swap(&b); }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QueryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryRequest& from) { QueryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QueryRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "QueryRequest"; }

 protected:
  explicit QueryRequest(::google::protobuf::Arena* arena);
  QueryRequest(::google::protobuf::Arena* arena, const QueryRequest& from);
  QueryRequest(::google::protobuf::Arena* arena, QueryRequest&& from) noexcept
      : QueryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQueriesFieldNumber = 1,
  };
  // repeated .QueryCondition queries = 1;
  int queries_size() const;
  private:
  int _internal_queries_size() const;

  public:
  void clear_queries() ;
  ::QueryCondition* mutable_queries(int index);
  ::google::protobuf::RepeatedPtrField<::QueryCondition>* mutable_queries();

  private:
  const ::google::protobuf::RepeatedPtrField<::QueryCondition>& _internal_queries() const;
  ::google::protobuf::RepeatedPtrField<::QueryCondition>* _internal_mutable_queries();
  public:
  const ::QueryCondition& queries(int index) const;
  ::QueryCondition* add_queries();
  const ::google::protobuf::RepeatedPtrField<::QueryCondition>& queries() const;
  // @@protoc_insertion_point(class_scope:QueryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_QueryRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::QueryCondition > queries_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collision_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryCondition

// .QueryFields field = 1;
inline void QueryCondition::clear_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_ = 0;
}
inline ::QueryFields QueryCondition::field() const {
  // @@protoc_insertion_point(field_get:QueryCondition.field)
  return _internal_field();
}
inline void QueryCondition::set_field(::QueryFields value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:QueryCondition.field)
}
inline ::QueryFields QueryCondition::_internal_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::QueryFields>(_impl_.field_);
}
inline void QueryCondition::_internal_set_field(::QueryFields value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_ = value;
}

// .Condition condition = 2;
inline void QueryCondition::clear_condition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_ = 0;
}
inline ::Condition QueryCondition::condition() const {
  // @@protoc_insertion_point(field_get:QueryCondition.condition)
  return _internal_condition();
}
inline void QueryCondition::set_condition(::Condition value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:QueryCondition.condition)
}
inline ::Condition QueryCondition::_internal_condition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Condition>(_impl_.condition_);
}
inline void QueryCondition::_internal_set_condition(::Condition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_ = value;
}

// string str_data = 3;
inline bool QueryCondition::has_str_data() const {
  return data_case() == kStrData;
}
inline void QueryCondition::set_has_str_data() {
  _impl_._oneof_case_[0] = kStrData;
}
inline void QueryCondition::clear_str_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kStrData) {
    _impl_.data_.str_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& QueryCondition::str_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:QueryCondition.str_data)
  return _internal_str_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCondition::set_str_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kStrData) {
    clear_data();

    set_has_str_data();
    _impl_.data_.str_data_.InitDefault();
  }
  _impl_.data_.str_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:QueryCondition.str_data)
}
inline std::string* QueryCondition::mutable_str_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_str_data();
  // @@protoc_insertion_point(field_mutable:QueryCondition.str_data)
  return _s;
}
inline const std::string& QueryCondition::_internal_str_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (data_case() != kStrData) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.str_data_.Get();
}
inline void QueryCondition::_internal_set_str_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kStrData) {
    clear_data();

    set_has_str_data();
    _impl_.data_.str_data_.InitDefault();
  }
  _impl_.data_.str_data_.Set(value, GetArena());
}
inline std::string* QueryCondition::_internal_mutable_str_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() != kStrData) {
    clear_data();

    set_has_str_data();
    _impl_.data_.str_data_.InitDefault();
  }
  return _impl_.data_.str_data_.Mutable( GetArena());
}
inline std::string* QueryCondition::release_str_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:QueryCondition.str_data)
  if (data_case() != kStrData) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.str_data_.Release();
}
inline void QueryCondition::set_allocated_str_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_str_data();
    _impl_.data_.str_data_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:QueryCondition.str_data)
}

// int32 int_data = 4;
inline bool QueryCondition::has_int_data() const {
  return data_case() == kIntData;
}
inline void QueryCondition::set_has_int_data() {
  _impl_._oneof_case_[0] = kIntData;
}
inline void QueryCondition::clear_int_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (data_case() == kIntData) {
    _impl_.data_.int_data_ = 0;
    clear_has_data();
  }
}
inline ::int32_t QueryCondition::int_data() const {
  // @@protoc_insertion_point(field_get:QueryCondition.int_data)
  return _internal_int_data();
}
inline void QueryCondition::set_int_data(::int32_t value) {
  if (data_case() != kIntData) {
    clear_data();
    set_has_int_data();
  }
  _impl_.data_.int_data_ = value;
  // @@protoc_insertion_point(field_set:QueryCondition.int_data)
}
inline ::int32_t QueryCondition::_internal_int_data() const {
  if (data_case() == kIntData) {
    return _impl_.data_.int_data_;
  }
  return 0;
}

inline bool QueryCondition::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void QueryCondition::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline QueryCondition::DataCase QueryCondition::data_case() const {
  return QueryCondition::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueryRequest

// repeated .QueryCondition queries = 1;
inline int QueryRequest::_internal_queries_size() const {
  return _internal_queries().size();
}
inline int QueryRequest::queries_size() const {
  return _internal_queries_size();
}
inline void QueryRequest::clear_queries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queries_.Clear();
}
inline ::QueryCondition* QueryRequest::mutable_queries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:QueryRequest.queries)
  return _internal_mutable_queries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::QueryCondition>* QueryRequest::mutable_queries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:QueryRequest.queries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_queries();
}
inline const ::QueryCondition& QueryRequest::queries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:QueryRequest.queries)
  return _internal_queries().Get(index);
}
inline ::QueryCondition* QueryRequest::add_queries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::QueryCondition* _add = _internal_mutable_queries()->Add();
  // @@protoc_insertion_point(field_add:QueryRequest.queries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::QueryCondition>& QueryRequest::queries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:QueryRequest.queries)
  return _internal_queries();
}
inline const ::google::protobuf::RepeatedPtrField<::QueryCondition>&
QueryRequest::_internal_queries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queries_;
}
inline ::google::protobuf::RepeatedPtrField<::QueryCondition>*
QueryRequest::_internal_mutable_queries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.queries_;
}

// -------------------------------------------------------------------

// GRPCollision

// string crash_date = 1;
inline void GRPCollision::clear_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.ClearToEmpty();
}
inline const std::string& GRPCollision::crash_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.crash_date)
  return _internal_crash_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_crash_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.crash_date)
}
inline std::string* GRPCollision::mutable_crash_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crash_date();
  // @@protoc_insertion_point(field_mutable:GRPCollision.crash_date)
  return _s;
}
inline const std::string& GRPCollision::_internal_crash_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_date_.Get();
}
inline void GRPCollision::_internal_set_crash_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.crash_date_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_crash_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.crash_date)
  return _impl_.crash_date_.Release();
}
inline void GRPCollision::set_allocated_crash_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.crash_date_.IsDefault()) {
          _impl_.crash_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.crash_date)
}

// string crash_time = 2;
inline void GRPCollision::clear_crash_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.ClearToEmpty();
}
inline const std::string& GRPCollision::crash_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.crash_time)
  return _internal_crash_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_crash_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.crash_time)
}
inline std::string* GRPCollision::mutable_crash_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crash_time();
  // @@protoc_insertion_point(field_mutable:GRPCollision.crash_time)
  return _s;
}
inline const std::string& GRPCollision::_internal_crash_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_time_.Get();
}
inline void GRPCollision::_internal_set_crash_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_crash_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.crash_time_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_crash_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.crash_time)
  return _impl_.crash_time_.Release();
}
inline void GRPCollision::set_allocated_crash_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.crash_time_.IsDefault()) {
          _impl_.crash_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.crash_time)
}

// string borough = 3;
inline void GRPCollision::clear_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.ClearToEmpty();
}
inline const std::string& GRPCollision::borough() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.borough)
  return _internal_borough();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_borough(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.borough)
}
inline std::string* GRPCollision::mutable_borough() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_borough();
  // @@protoc_insertion_point(field_mutable:GRPCollision.borough)
  return _s;
}
inline const std::string& GRPCollision::_internal_borough() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.borough_.Get();
}
inline void GRPCollision::_internal_set_borough(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.borough_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_borough() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.borough)
  return _impl_.borough_.Release();
}
inline void GRPCollision::set_allocated_borough(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.borough_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.borough_.IsDefault()) {
          _impl_.borough_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.borough)
}

// uint32 zip_code = 4;
inline void GRPCollision::clear_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_ = 0u;
}
inline ::uint32_t GRPCollision::zip_code() const {
  // @@protoc_insertion_point(field_get:GRPCollision.zip_code)
  return _internal_zip_code();
}
inline void GRPCollision::set_zip_code(::uint32_t value) {
  _internal_set_zip_code(value);
  // @@protoc_insertion_point(field_set:GRPCollision.zip_code)
}
inline ::uint32_t GRPCollision::_internal_zip_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zip_code_;
}
inline void GRPCollision::_internal_set_zip_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_ = value;
}

// float latitude = 5;
inline void GRPCollision::clear_latitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = 0;
}
inline float GRPCollision::latitude() const {
  // @@protoc_insertion_point(field_get:GRPCollision.latitude)
  return _internal_latitude();
}
inline void GRPCollision::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:GRPCollision.latitude)
}
inline float GRPCollision::_internal_latitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.latitude_;
}
inline void GRPCollision::_internal_set_latitude(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.latitude_ = value;
}

// float longitude = 6;
inline void GRPCollision::clear_longitude() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = 0;
}
inline float GRPCollision::longitude() const {
  // @@protoc_insertion_point(field_get:GRPCollision.longitude)
  return _internal_longitude();
}
inline void GRPCollision::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:GRPCollision.longitude)
}
inline float GRPCollision::_internal_longitude() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longitude_;
}
inline void GRPCollision::_internal_set_longitude(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longitude_ = value;
}

// string location = 7;
inline void GRPCollision::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& GRPCollision::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.location)
}
inline std::string* GRPCollision::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GRPCollision.location)
  return _s;
}
inline const std::string& GRPCollision::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.location_.Get();
}
inline void GRPCollision::_internal_set_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.location)
  return _impl_.location_.Release();
}
inline void GRPCollision::set_allocated_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.location_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.location)
}

// string on_street_name = 8;
inline void GRPCollision::clear_on_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.ClearToEmpty();
}
inline const std::string& GRPCollision::on_street_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.on_street_name)
  return _internal_on_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_on_street_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.on_street_name)
}
inline std::string* GRPCollision::mutable_on_street_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_on_street_name();
  // @@protoc_insertion_point(field_mutable:GRPCollision.on_street_name)
  return _s;
}
inline const std::string& GRPCollision::_internal_on_street_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.on_street_name_.Get();
}
inline void GRPCollision::_internal_set_on_street_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_on_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.on_street_name_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_on_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.on_street_name)
  return _impl_.on_street_name_.Release();
}
inline void GRPCollision::set_allocated_on_street_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.on_street_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.on_street_name_.IsDefault()) {
          _impl_.on_street_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.on_street_name)
}

// string cross_street_name = 9;
inline void GRPCollision::clear_cross_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.ClearToEmpty();
}
inline const std::string& GRPCollision::cross_street_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.cross_street_name)
  return _internal_cross_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_cross_street_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.cross_street_name)
}
inline std::string* GRPCollision::mutable_cross_street_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cross_street_name();
  // @@protoc_insertion_point(field_mutable:GRPCollision.cross_street_name)
  return _s;
}
inline const std::string& GRPCollision::_internal_cross_street_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cross_street_name_.Get();
}
inline void GRPCollision::_internal_set_cross_street_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_cross_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.cross_street_name_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_cross_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.cross_street_name)
  return _impl_.cross_street_name_.Release();
}
inline void GRPCollision::set_allocated_cross_street_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cross_street_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cross_street_name_.IsDefault()) {
          _impl_.cross_street_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.cross_street_name)
}

// string off_street_name = 10;
inline void GRPCollision::clear_off_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.ClearToEmpty();
}
inline const std::string& GRPCollision::off_street_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.off_street_name)
  return _internal_off_street_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_off_street_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.off_street_name)
}
inline std::string* GRPCollision::mutable_off_street_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_off_street_name();
  // @@protoc_insertion_point(field_mutable:GRPCollision.off_street_name)
  return _s;
}
inline const std::string& GRPCollision::_internal_off_street_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.off_street_name_.Get();
}
inline void GRPCollision::_internal_set_off_street_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_off_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.off_street_name_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_off_street_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.off_street_name)
  return _impl_.off_street_name_.Release();
}
inline void GRPCollision::set_allocated_off_street_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.off_street_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.off_street_name_.IsDefault()) {
          _impl_.off_street_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.off_street_name)
}

// uint32 number_of_persons_injured = 11;
inline void GRPCollision::clear_number_of_persons_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_injured_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_persons_injured() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_persons_injured)
  return _internal_number_of_persons_injured();
}
inline void GRPCollision::set_number_of_persons_injured(::uint32_t value) {
  _internal_set_number_of_persons_injured(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_persons_injured)
}
inline ::uint32_t GRPCollision::_internal_number_of_persons_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_persons_injured_;
}
inline void GRPCollision::_internal_set_number_of_persons_injured(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_injured_ = value;
}

// uint32 number_of_persons_killed = 12;
inline void GRPCollision::clear_number_of_persons_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_killed_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_persons_killed() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_persons_killed)
  return _internal_number_of_persons_killed();
}
inline void GRPCollision::set_number_of_persons_killed(::uint32_t value) {
  _internal_set_number_of_persons_killed(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_persons_killed)
}
inline ::uint32_t GRPCollision::_internal_number_of_persons_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_persons_killed_;
}
inline void GRPCollision::_internal_set_number_of_persons_killed(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_persons_killed_ = value;
}

// uint32 number_of_pedestrians_injured = 13;
inline void GRPCollision::clear_number_of_pedestrians_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_injured_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_pedestrians_injured() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_pedestrians_injured)
  return _internal_number_of_pedestrians_injured();
}
inline void GRPCollision::set_number_of_pedestrians_injured(::uint32_t value) {
  _internal_set_number_of_pedestrians_injured(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_pedestrians_injured)
}
inline ::uint32_t GRPCollision::_internal_number_of_pedestrians_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_pedestrians_injured_;
}
inline void GRPCollision::_internal_set_number_of_pedestrians_injured(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_injured_ = value;
}

// uint32 number_of_pedestrians_killed = 14;
inline void GRPCollision::clear_number_of_pedestrians_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_killed_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_pedestrians_killed() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_pedestrians_killed)
  return _internal_number_of_pedestrians_killed();
}
inline void GRPCollision::set_number_of_pedestrians_killed(::uint32_t value) {
  _internal_set_number_of_pedestrians_killed(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_pedestrians_killed)
}
inline ::uint32_t GRPCollision::_internal_number_of_pedestrians_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_pedestrians_killed_;
}
inline void GRPCollision::_internal_set_number_of_pedestrians_killed(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_pedestrians_killed_ = value;
}

// uint32 number_of_cyclist_injured = 15;
inline void GRPCollision::clear_number_of_cyclist_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_injured_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_cyclist_injured() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_cyclist_injured)
  return _internal_number_of_cyclist_injured();
}
inline void GRPCollision::set_number_of_cyclist_injured(::uint32_t value) {
  _internal_set_number_of_cyclist_injured(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_cyclist_injured)
}
inline ::uint32_t GRPCollision::_internal_number_of_cyclist_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_cyclist_injured_;
}
inline void GRPCollision::_internal_set_number_of_cyclist_injured(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_injured_ = value;
}

// uint32 number_of_cyclist_killed = 16;
inline void GRPCollision::clear_number_of_cyclist_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_killed_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_cyclist_killed() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_cyclist_killed)
  return _internal_number_of_cyclist_killed();
}
inline void GRPCollision::set_number_of_cyclist_killed(::uint32_t value) {
  _internal_set_number_of_cyclist_killed(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_cyclist_killed)
}
inline ::uint32_t GRPCollision::_internal_number_of_cyclist_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_cyclist_killed_;
}
inline void GRPCollision::_internal_set_number_of_cyclist_killed(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_cyclist_killed_ = value;
}

// uint32 number_of_motorist_injured = 17;
inline void GRPCollision::clear_number_of_motorist_injured() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_injured_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_motorist_injured() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_motorist_injured)
  return _internal_number_of_motorist_injured();
}
inline void GRPCollision::set_number_of_motorist_injured(::uint32_t value) {
  _internal_set_number_of_motorist_injured(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_motorist_injured)
}
inline ::uint32_t GRPCollision::_internal_number_of_motorist_injured() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_motorist_injured_;
}
inline void GRPCollision::_internal_set_number_of_motorist_injured(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_injured_ = value;
}

// uint32 number_of_motorist_killed = 18;
inline void GRPCollision::clear_number_of_motorist_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_killed_ = 0u;
}
inline ::uint32_t GRPCollision::number_of_motorist_killed() const {
  // @@protoc_insertion_point(field_get:GRPCollision.number_of_motorist_killed)
  return _internal_number_of_motorist_killed();
}
inline void GRPCollision::set_number_of_motorist_killed(::uint32_t value) {
  _internal_set_number_of_motorist_killed(value);
  // @@protoc_insertion_point(field_set:GRPCollision.number_of_motorist_killed)
}
inline ::uint32_t GRPCollision::_internal_number_of_motorist_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.number_of_motorist_killed_;
}
inline void GRPCollision::_internal_set_number_of_motorist_killed(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.number_of_motorist_killed_ = value;
}

// string contributing_factor_vehicle_1 = 19;
inline void GRPCollision::clear_contributing_factor_vehicle_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.ClearToEmpty();
}
inline const std::string& GRPCollision::contributing_factor_vehicle_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.contributing_factor_vehicle_1)
  return _internal_contributing_factor_vehicle_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_contributing_factor_vehicle_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.contributing_factor_vehicle_1)
}
inline std::string* GRPCollision::mutable_contributing_factor_vehicle_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_1();
  // @@protoc_insertion_point(field_mutable:GRPCollision.contributing_factor_vehicle_1)
  return _s;
}
inline const std::string& GRPCollision::_internal_contributing_factor_vehicle_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_1_.Get();
}
inline void GRPCollision::_internal_set_contributing_factor_vehicle_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_contributing_factor_vehicle_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_1_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_contributing_factor_vehicle_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.contributing_factor_vehicle_1)
  return _impl_.contributing_factor_vehicle_1_.Release();
}
inline void GRPCollision::set_allocated_contributing_factor_vehicle_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contributing_factor_vehicle_1_.IsDefault()) {
          _impl_.contributing_factor_vehicle_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.contributing_factor_vehicle_1)
}

// string contributing_factor_vehicle_2 = 20;
inline void GRPCollision::clear_contributing_factor_vehicle_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.ClearToEmpty();
}
inline const std::string& GRPCollision::contributing_factor_vehicle_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.contributing_factor_vehicle_2)
  return _internal_contributing_factor_vehicle_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_contributing_factor_vehicle_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.contributing_factor_vehicle_2)
}
inline std::string* GRPCollision::mutable_contributing_factor_vehicle_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_2();
  // @@protoc_insertion_point(field_mutable:GRPCollision.contributing_factor_vehicle_2)
  return _s;
}
inline const std::string& GRPCollision::_internal_contributing_factor_vehicle_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_2_.Get();
}
inline void GRPCollision::_internal_set_contributing_factor_vehicle_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_contributing_factor_vehicle_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_2_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_contributing_factor_vehicle_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.contributing_factor_vehicle_2)
  return _impl_.contributing_factor_vehicle_2_.Release();
}
inline void GRPCollision::set_allocated_contributing_factor_vehicle_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contributing_factor_vehicle_2_.IsDefault()) {
          _impl_.contributing_factor_vehicle_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.contributing_factor_vehicle_2)
}

// string contributing_factor_vehicle_3 = 21;
inline void GRPCollision::clear_contributing_factor_vehicle_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.ClearToEmpty();
}
inline const std::string& GRPCollision::contributing_factor_vehicle_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.contributing_factor_vehicle_3)
  return _internal_contributing_factor_vehicle_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_contributing_factor_vehicle_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.contributing_factor_vehicle_3)
}
inline std::string* GRPCollision::mutable_contributing_factor_vehicle_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_3();
  // @@protoc_insertion_point(field_mutable:GRPCollision.contributing_factor_vehicle_3)
  return _s;
}
inline const std::string& GRPCollision::_internal_contributing_factor_vehicle_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_3_.Get();
}
inline void GRPCollision::_internal_set_contributing_factor_vehicle_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_contributing_factor_vehicle_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_3_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_contributing_factor_vehicle_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.contributing_factor_vehicle_3)
  return _impl_.contributing_factor_vehicle_3_.Release();
}
inline void GRPCollision::set_allocated_contributing_factor_vehicle_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contributing_factor_vehicle_3_.IsDefault()) {
          _impl_.contributing_factor_vehicle_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.contributing_factor_vehicle_3)
}

// string contributing_factor_vehicle_4 = 22;
inline void GRPCollision::clear_contributing_factor_vehicle_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.ClearToEmpty();
}
inline const std::string& GRPCollision::contributing_factor_vehicle_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.contributing_factor_vehicle_4)
  return _internal_contributing_factor_vehicle_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_contributing_factor_vehicle_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.contributing_factor_vehicle_4)
}
inline std::string* GRPCollision::mutable_contributing_factor_vehicle_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_4();
  // @@protoc_insertion_point(field_mutable:GRPCollision.contributing_factor_vehicle_4)
  return _s;
}
inline const std::string& GRPCollision::_internal_contributing_factor_vehicle_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_4_.Get();
}
inline void GRPCollision::_internal_set_contributing_factor_vehicle_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_contributing_factor_vehicle_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_4_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_contributing_factor_vehicle_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.contributing_factor_vehicle_4)
  return _impl_.contributing_factor_vehicle_4_.Release();
}
inline void GRPCollision::set_allocated_contributing_factor_vehicle_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contributing_factor_vehicle_4_.IsDefault()) {
          _impl_.contributing_factor_vehicle_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.contributing_factor_vehicle_4)
}

// string contributing_factor_vehicle_5 = 23;
inline void GRPCollision::clear_contributing_factor_vehicle_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.ClearToEmpty();
}
inline const std::string& GRPCollision::contributing_factor_vehicle_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.contributing_factor_vehicle_5)
  return _internal_contributing_factor_vehicle_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_contributing_factor_vehicle_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.contributing_factor_vehicle_5)
}
inline std::string* GRPCollision::mutable_contributing_factor_vehicle_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contributing_factor_vehicle_5();
  // @@protoc_insertion_point(field_mutable:GRPCollision.contributing_factor_vehicle_5)
  return _s;
}
inline const std::string& GRPCollision::_internal_contributing_factor_vehicle_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributing_factor_vehicle_5_.Get();
}
inline void GRPCollision::_internal_set_contributing_factor_vehicle_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_contributing_factor_vehicle_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contributing_factor_vehicle_5_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_contributing_factor_vehicle_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.contributing_factor_vehicle_5)
  return _impl_.contributing_factor_vehicle_5_.Release();
}
inline void GRPCollision::set_allocated_contributing_factor_vehicle_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributing_factor_vehicle_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contributing_factor_vehicle_5_.IsDefault()) {
          _impl_.contributing_factor_vehicle_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.contributing_factor_vehicle_5)
}

// uint64 collision_id = 24;
inline void GRPCollision::clear_collision_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_id_ = ::uint64_t{0u};
}
inline ::uint64_t GRPCollision::collision_id() const {
  // @@protoc_insertion_point(field_get:GRPCollision.collision_id)
  return _internal_collision_id();
}
inline void GRPCollision::set_collision_id(::uint64_t value) {
  _internal_set_collision_id(value);
  // @@protoc_insertion_point(field_set:GRPCollision.collision_id)
}
inline ::uint64_t GRPCollision::_internal_collision_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collision_id_;
}
inline void GRPCollision::_internal_set_collision_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_id_ = value;
}

// string vehicle_type_code_1 = 25;
inline void GRPCollision::clear_vehicle_type_code_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.ClearToEmpty();
}
inline const std::string& GRPCollision::vehicle_type_code_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.vehicle_type_code_1)
  return _internal_vehicle_type_code_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_vehicle_type_code_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.vehicle_type_code_1)
}
inline std::string* GRPCollision::mutable_vehicle_type_code_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_1();
  // @@protoc_insertion_point(field_mutable:GRPCollision.vehicle_type_code_1)
  return _s;
}
inline const std::string& GRPCollision::_internal_vehicle_type_code_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_1_.Get();
}
inline void GRPCollision::_internal_set_vehicle_type_code_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_vehicle_type_code_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_1_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_vehicle_type_code_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.vehicle_type_code_1)
  return _impl_.vehicle_type_code_1_.Release();
}
inline void GRPCollision::set_allocated_vehicle_type_code_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vehicle_type_code_1_.IsDefault()) {
          _impl_.vehicle_type_code_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.vehicle_type_code_1)
}

// string vehicle_type_code_2 = 26;
inline void GRPCollision::clear_vehicle_type_code_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.ClearToEmpty();
}
inline const std::string& GRPCollision::vehicle_type_code_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.vehicle_type_code_2)
  return _internal_vehicle_type_code_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_vehicle_type_code_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.vehicle_type_code_2)
}
inline std::string* GRPCollision::mutable_vehicle_type_code_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_2();
  // @@protoc_insertion_point(field_mutable:GRPCollision.vehicle_type_code_2)
  return _s;
}
inline const std::string& GRPCollision::_internal_vehicle_type_code_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_2_.Get();
}
inline void GRPCollision::_internal_set_vehicle_type_code_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_vehicle_type_code_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_2_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_vehicle_type_code_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.vehicle_type_code_2)
  return _impl_.vehicle_type_code_2_.Release();
}
inline void GRPCollision::set_allocated_vehicle_type_code_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vehicle_type_code_2_.IsDefault()) {
          _impl_.vehicle_type_code_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.vehicle_type_code_2)
}

// string vehicle_type_code_3 = 27;
inline void GRPCollision::clear_vehicle_type_code_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.ClearToEmpty();
}
inline const std::string& GRPCollision::vehicle_type_code_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.vehicle_type_code_3)
  return _internal_vehicle_type_code_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_vehicle_type_code_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.vehicle_type_code_3)
}
inline std::string* GRPCollision::mutable_vehicle_type_code_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_3();
  // @@protoc_insertion_point(field_mutable:GRPCollision.vehicle_type_code_3)
  return _s;
}
inline const std::string& GRPCollision::_internal_vehicle_type_code_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_3_.Get();
}
inline void GRPCollision::_internal_set_vehicle_type_code_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_vehicle_type_code_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_3_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_vehicle_type_code_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.vehicle_type_code_3)
  return _impl_.vehicle_type_code_3_.Release();
}
inline void GRPCollision::set_allocated_vehicle_type_code_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vehicle_type_code_3_.IsDefault()) {
          _impl_.vehicle_type_code_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.vehicle_type_code_3)
}

// string vehicle_type_code_4 = 28;
inline void GRPCollision::clear_vehicle_type_code_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.ClearToEmpty();
}
inline const std::string& GRPCollision::vehicle_type_code_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.vehicle_type_code_4)
  return _internal_vehicle_type_code_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_vehicle_type_code_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.vehicle_type_code_4)
}
inline std::string* GRPCollision::mutable_vehicle_type_code_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_4();
  // @@protoc_insertion_point(field_mutable:GRPCollision.vehicle_type_code_4)
  return _s;
}
inline const std::string& GRPCollision::_internal_vehicle_type_code_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_4_.Get();
}
inline void GRPCollision::_internal_set_vehicle_type_code_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_vehicle_type_code_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_4_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_vehicle_type_code_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.vehicle_type_code_4)
  return _impl_.vehicle_type_code_4_.Release();
}
inline void GRPCollision::set_allocated_vehicle_type_code_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vehicle_type_code_4_.IsDefault()) {
          _impl_.vehicle_type_code_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.vehicle_type_code_4)
}

// string vehicle_type_code_5 = 29;
inline void GRPCollision::clear_vehicle_type_code_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.ClearToEmpty();
}
inline const std::string& GRPCollision::vehicle_type_code_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GRPCollision.vehicle_type_code_5)
  return _internal_vehicle_type_code_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GRPCollision::set_vehicle_type_code_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GRPCollision.vehicle_type_code_5)
}
inline std::string* GRPCollision::mutable_vehicle_type_code_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehicle_type_code_5();
  // @@protoc_insertion_point(field_mutable:GRPCollision.vehicle_type_code_5)
  return _s;
}
inline const std::string& GRPCollision::_internal_vehicle_type_code_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehicle_type_code_5_.Get();
}
inline void GRPCollision::_internal_set_vehicle_type_code_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.Set(value, GetArena());
}
inline std::string* GRPCollision::_internal_mutable_vehicle_type_code_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehicle_type_code_5_.Mutable( GetArena());
}
inline std::string* GRPCollision::release_vehicle_type_code_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GRPCollision.vehicle_type_code_5)
  return _impl_.vehicle_type_code_5_.Release();
}
inline void GRPCollision::set_allocated_vehicle_type_code_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehicle_type_code_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vehicle_type_code_5_.IsDefault()) {
          _impl_.vehicle_type_code_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GRPCollision.vehicle_type_code_5)
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .GRPCollision collision = 1;
inline int QueryResponse::_internal_collision_size() const {
  return _internal_collision().size();
}
inline int QueryResponse::collision_size() const {
  return _internal_collision_size();
}
inline void QueryResponse::clear_collision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.collision_.Clear();
}
inline ::GRPCollision* QueryResponse::mutable_collision(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:QueryResponse.collision)
  return _internal_mutable_collision()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::GRPCollision>* QueryResponse::mutable_collision()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:QueryResponse.collision)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_collision();
}
inline const ::GRPCollision& QueryResponse::collision(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:QueryResponse.collision)
  return _internal_collision().Get(index);
}
inline ::GRPCollision* QueryResponse::add_collision() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::GRPCollision* _add = _internal_mutable_collision()->Add();
  // @@protoc_insertion_point(field_add:QueryResponse.collision)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::GRPCollision>& QueryResponse::collision() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:QueryResponse.collision)
  return _internal_collision();
}
inline const ::google::protobuf::RepeatedPtrField<::GRPCollision>&
QueryResponse::_internal_collision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.collision_;
}
inline ::google::protobuf::RepeatedPtrField<::GRPCollision>*
QueryResponse::_internal_mutable_collision() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.collision_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Condition> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Condition>() {
  return ::Condition_descriptor();
}
template <>
struct is_proto_enum<::QueryFields> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::QueryFields>() {
  return ::QueryFields_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_collision_2eproto_2epb_2eh
